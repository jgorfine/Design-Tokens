// This file was generated with Diez - https://diez.org
// Do not edit this file directly.

export declare class RootComponent {}

export declare class Diez<T extends RootComponent> {
  constructor (baseClass: new () => T);
  readonly component: T;
  static applyHTMLExtensions(): void;
  attach(subscriber: (component: T) => void): void;
}

export declare class Color {
  /**
   * The raw color, suitable for usage in CSS and HTML.
   */
  color: string;
  /**
   * CSS declarations for the `color` CSS property.
   */
  colorStyle: {color: string};
  /**
   * CSS declarations for the `background-color` CSS property.
   */
  backgroundColorStyle: {backgroundColor: string};
  /**
   * CSS declarations for the `border-color` CSS property.
   */
  borderColorStyle: {borderColor: string};
  /**
   * CSS declarations for the `outline-color` CSS property.
   */
  outlineColorStyle: {outlineColor: string};
}

/**
 * Provides a gradient stop.
 *
 */
export declare class GradientStop {
  /**
   * GradientStop data.
   *
   * 1
   */
  position: number;
  /**
   * GradientStop data.
   *
   * hsla(0, 0, 0, 1)
   */
  color: Color;
}

/**
 * Provides a two dimensional point.
 * 
 * Taken alone, points are designated in an abstract space with no inherit dimensions or directionality. In the
 * context of other prefabs like [[LinearGradient]], points typically should use the standard two dimensional graphics
 * space, often normalized in the unit square, where x increases from left to right and y increases from top to bottom.
 * 
 * Usage: `point = Point2D.make(0.5, 0.5);`.
 *
 */
export declare class Point2D {
  /**
   * Point data.
   *
   * 0.5
   */
  x: number;
  /**
   * Point data.
   *
   * 0
   */
  y: number;
}

export declare class LinearGradient {
  /**
   * The CSS linear-gradient representation of the `LinearGradient`.
   * @example
   * linear-gradient(45deg, hsla(0, 0%, 100%, 1) 0%, hsla(0, 0%, 0%, 1) 100%)
   */
  linearGradient: string;
  /**
   * CSS declarations for the `background-image` CSS property.
   */
  backgroundImageStyle: {backgroundImage: string};
  /**
   * CSS declarations for the `background` CSS property.
   */
  backgroundStyle: {background: string};
}

/**
 * You can collect anything inside a Diez component. Design tokens specified as
 * properties will be made available in the SDKs transpiled with Diez.
 *
 */
export declare class Palette {
  /**
   * hsla(0, 0, 0.95, 1)
   */
  pageBackground: Color;
  /**
   * hsla(0.82, 0.31, 0.21, 1)
   */
  text: Color;
  /**
   * hsla(0.82, 0.31, 0.21, 1)
   */
  caption: Color;
  /**
   * start [0.5, 0], end [0.5, 1], stops: [hsla(0.82, 0.31, 0.21, 1) at 0,hsla(0, 0, 0, 1) at 1]
   */
  headerBackground: LinearGradient;
}

export declare class File {
  /**
   * The URL of the `File`
   */
  url: string;
}

/**
 * A representation of a font resource, with a reference to a [[File]] containing a TTF or OTF font file.
 *
 */
export declare class Font {
  /**
   * Font data.
   *
   * assets/SourceSansPro-Regular.ttf
   */
  file: File;
  /**
   * Font data.
   *
   * SourceSansPro-Regular
   */
  name: string;
  /**
   * Font data.
   *
   * [sans-serif]
   */
  fallbacks: string[];
  /**
   * Font data.
   *
   * 400
   */
  weight: number;
  /**
   * Font data.
   *
   * normal
   */
  style: string;
}

export declare class Typograph {
  /**
   * An `Object` with CSS values for this `Typograph`.
   */
  style: {
    color: string,
    fontSize: string,
    fontFamily: string,
    fontWeight: number,
    fontStyle: string,
    lineHeight?: string,
    letterSpacing: number,
    textAlign: "start" | "left" | "right" | "center",
    textDecoration: string,
  };
  /**
   * Applies the `Typograph` CSS styles to the given HTMLElement.
   */
  applyStyle(ref: HTMLElement): void;
}

declare global {
  interface HTMLElement {
    /**
     * Applies a Diez Typograph definition to the element.
     *
     * You *must* have called `Diez.applyHTMLExtensions()` at least once to use this method.
     */
    applyTypograph(typograph: Typograph): void;
  }
}

/**
 * Typographs encapsulate type styles with support for a specific font, font size,
 * and color. More typograph properties are coming soon.
 *
 */
export declare class Typography {
  /**
   * - font: `SourceSansPro-Regular, 400, normal`
   * - fontSize: `24`
   * - color: `hsla(0.82, 0.31, 0.21, 1)`
   * - iosTextStyle: `body`
   * - shouldScale: `false`
   * - lineHeight: `-1`
   * - letterSpacing: `0`
   * - alignment: `natural`
   * - decoration: `[]`
   */
  heading1: Typograph;
  /**
   * - font: `SourceSansPro-Regular, 400, normal`
   * - fontSize: `18`
   * - color: `hsla(0.82, 0.31, 0.21, 1)`
   * - iosTextStyle: `body`
   * - shouldScale: `false`
   * - lineHeight: `-1`
   * - letterSpacing: `0`
   * - alignment: `center`
   * - decoration: `[]`
   */
  body: Typograph;
  /**
   * - font: `SourceSansPro-Regular, 400, normal`
   * - fontSize: `14`
   * - color: `hsla(0.82, 0.31, 0.21, 1)`
   * - iosTextStyle: `body`
   * - shouldScale: `false`
   * - lineHeight: `-1`
   * - letterSpacing: `0`
   * - alignment: `natural`
   * - decoration: `[]`
   */
  caption: Typograph;
}

export declare class Size2D {
  /**
   * The width of the size.
   */
  width: number;
  /**
   * The height of the size.
   */
  height: number;
  /**
   * CSS declarations for the `width` and `height` CSS properties.
   */
  style: {width: string, height: string};
  /**
   * CSS declarations for the `background-size` CSS property.
   */
  backgroundSizeStyle: {backgroundSize: string};
}

export declare class Image {
  /**
   * The URL of the `Image`
   */
  url: string;
  /**
   * CSS declarations for the `background-image` CSS property.
   */
  backgroundImageStyle: {backgroundImage: string};
}

/**
 * In addition to colors and typography, you can also collect other types of
 * design language primitives in components as well — such as images, icons &
 * animations.
 *
 */
export declare class Images {
  /**
   * assets/logo.png (52 x 48)
   */
  logo: Image;
  /**
   * assets/masthead.png (208 x 88)
   */
  masthead: Image;
}

/**
 * Here we create a custom reusable component for describing layout margins.
 *
 */
export declare class Margin {
  /**
   * Defining the interface of your component's data enables you to instantiate your own
   * reusable components.
   *
   * 40
   */
  top: number;
  /**
   * Defining the interface of your component's data enables you to instantiate your own
   * reusable components.
   *
   * 10
   */
  bottom: number;
  /**
   * Defining the interface of your component's data enables you to instantiate your own
   * reusable components.
   *
   * 10
   */
  left: number;
  /**
   * Defining the interface of your component's data enables you to instantiate your own
   * reusable components.
   *
   * 10
   */
  right: number;
}

/**
 * You can even collect your own custom components.
 *
 */
export declare class LayoutValues {
  /**
   * 5
   */
  spacingSmall: number;
  /**
   * 25
   */
  spacingMedium: number;
  /**
   * 40
   */
  spacingLarge: number;
  /**
   * - top: `40`
   * - bottom: `10`
   * - left: `10`
   * - right: `10`
   */
  contentMargin: Margin;
}

/**
 * You can also define strings.
 *
 */
export declare class Strings {
  /**
   * Diez
   */
  title: string;
  /**
   * Keep your designs in sync with code
   */
  caption: string;
  /**
   * Modify the contents of “src/DesignLanguage.ts” (relative to the root of the Diez project) to see changes to the design language in real time.
   */
  helper: string;
}

export declare class DropShadow {
  /**
   * The CSS box-shadow representation of the `DropShadow`.
   * @example
   * 0px 1px 16px rgba(0, 0, 16, .4)
   */
  boxShadow: string;
  /**
   * The CSS text-shadow representation of the `DropShadow`.
   * @example
   * 0px 1px 16px rgba(0, 0, 16, .4)
   */
  textShadow: string;
  /**
   * The CSS filter representation of the `DropShadow`.
   * @example
   * drop-shadow(0px 1px 16px rgba(0, 0, 16, .4))
   */
  filter: string;
  /**
   * CSS declarations for the `box-shadow` CSS property.
   */
  boxShadowStyle: {boxShadow: string};
  /**
   * CSS declarations for the `text-shadow` CSS property.
   */
  textShadowStyle: {textShadow: string};
  /**
   * CSS declarations for the `filter` CSS property.
   */
  filterStyle: {filter: string};
}

export declare class Shadows {
  /**
   * - offset: `[0, 1]`
   * - radius: `16`
   * - color: `hsla(0, 0, 0, 0.41)`
   */
  logo: DropShadow;
}

export declare class Lottie {
  /**
   * Mounts a `Lottie` animation on the given element.
   */
  mount(ref: any): void;
}

declare global {
  interface HTMLElement {
    /**
     * Mounts a Lottie animation on the element.
     *
     * You *must* have called `Diez.applyHTMLExtensions()` at least once to use this method.
     */
    mountLottie(lottieComponent: Lottie): void;
  }
}

/**
 * Note how this component is exported from `index.ts`. Diez compiles these
 * exported components for your apps' codebases.
 * 
 * For example:
 *    - If you run `yarn start web` or `npm run start web`, Diez will create a Node package called
 *      `diez-fiscal-note-tokens-web`. Look for `App.jsx` inside `examples/web` to see
 *      how you can use Diez in a web codebase.
 *    - If you run `yarn start ios` or `npm run start ios`, Diez will create a CocoaPods dependency
 *      called `DiezFiscalNoteTokens`. Look for `ViewController.swift` inside
 *      `examples/ios` to see how you can use Diez in an iOS codebase.
 *    - If you run `yarn start android` or `npm run start android`, Diez will create an Android library.
 *      Look for `MainActivity.kt` inside `examples/android` to see how you can
 *      use Diez in an Android codebase.
 *  - If you run `yarn start web` or `npm run start web`, Diez will create a Web App with your tokens.
 *
 */
export declare class DesignLanguage extends RootComponent {
  palette: Palette;
  typography: Typography;
  images: Images;
  layoutValues: LayoutValues;
  strings: Strings;
  shadows: Shadows;
  /**
   * - file: `assets/loadingAnimation.json`
   * - loop: `false`
   * - autoplay: `true`
   */
  loadingAnimation: Lottie;
}

